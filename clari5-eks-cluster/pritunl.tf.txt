
######################################################################################################################
##############################################  pritunl Instance Creation ################################################
######################################################################################################################

######################################### Supporting Resources ##########################################################
resource "aws_security_group" "pritunl_sg" {
  name        = "${var.pritunl_instance_name}_sg"
  description = "Security group for the pritunl Instance"
  vpc_id      = module.vpc.vpc_id

  ingress {
    description      = "HTTPS from Public "
    from_port        = 443
    to_port          = 443
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }
   ingress {
    description      = "HTTP from Public "
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }
  ingress {
    description      = "UDP from Public "
    from_port        = 10555
    to_port          = 10555
    protocol         = "udp"
    cidr_blocks      = ["0.0.0.0/0"]
  }
  ingress {
    description      = "SSH from Public "
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = var.resource_tags
}

module "ec2_pritunl" {  
  source                      = "terraform-aws-modules/ec2-instance/aws"
  version                     = "4.0.0"
  create                      = var.pritunl_instance_create
  name                        = var.pritunl_instance_name
  ami                         = var.pritunl_ami_id
  instance_type               = var.pritunl_instance_type
  availability_zone           = element(module.vpc.azs, 0)
  subnet_id                   = element(module.vpc.public_subnets, 0)
  vpc_security_group_ids      = [aws_security_group.pritunl_sg.id]
# placement_group             = aws_placement_group.web.id
#   associate_public_ip_address = false
  key_name                    = aws_key_pair.generated_key.id
  disable_api_termination     = true
# iam_instance_profile        = aws_iam_instance_profile.pritunl_instance_profile.name
  monitoring                  = true
  ebs_optimized               = false
  # only one of these can be enabled at a time
  hibernation = true
  # enclave_options_enabled = true

#   user_data_base64            = base64encode(local.user_data)
#   user_data_replace_on_change = true

#   cpu_core_count       = 4 # default 4
#   cpu_threads_per_core = 2 # default 2

  capacity_reservation_specification = {
    capacity_reservation_preference = "open"
  }

  enable_volume_tags = false
  root_block_device = [
    {
      encrypted   = true
      volume_type = "gp3"
      throughput  = 200
      volume_size = 30
      tags = {
        Name = "${var.pritunl_instance_name}_root_volume"
      }
    },
  ]

#   ebs_block_device = [
#     {
#       device_name = "/dev/sdc"
#       volume_type = "io1"
#       volume_size = 500
#       delete_on_termination = false
#       iops = 5000 
#     }
#   ]

tags = var.resource_tags
}


resource "aws_eip" "pritunl_es_ip" {
  instance = module.ec2_pritunl.id
  vpc      = true
  tags = {
    Name = "${var.pritunl_instance_name}_elastic_ip"
  }
}

############################### VARAIBALES #################################
############################################ PriTunl ########################################
variable "pritunl_instance_name" {} 
variable "pritunl_instance_create" {}
variable "pritunl_ami_id" {} 
variable "pritunl_instance_type" {} 